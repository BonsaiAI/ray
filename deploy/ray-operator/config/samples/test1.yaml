apiVersion: v1
kind: ConfigMap
metadata:
  name: ray-code
data: 
  code.py: |
    import time
    print("Waiting 10s for worker nodes to join!")
    time.sleep(10) # allowing workers to register
    import ray
    from ray import services
    from os import environ
    redis_pass = environ.get("REDIS_PASSWORD") 
    print("trying to connect to Ray!")
    ray.init(address="auto", _redis_password=redis_pass)
    print("now executing some code with Ray!")
    start = time.time()
    @ray.remote
    def f():
      time.sleep(0.01)
      return ray.services.get_node_ip_address()
    values=set(ray.get([f.remote() for _ in range(1000)]))
    print("Ray Nodes: ",str(values))
    f = open("/var/ray_nodes.txt","a")
    f.write("str(values)")
    f.close()
    end = time.time()
    print("Execution time = ",end - start)
---
apiVersion: ray.io/v1alpha1
kind: RayCluster
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
    # An unique identifier for the head node and workers of this cluster.
  name: raycluster-test
spec:
  rayVersion: '0.8.6' # should match the Ray version in the image of the containers
  ######################headService#################################
  # head service {namespace}.svc , follows Kubernetes standard
  headService: 
    metadata:
      name: "ray-operator-svc"
    spec:
      selector:
        identifier: raycluster-test-head # <clusterName>-<rayNodeType>
      ports:
        - protocol: TCP
          port: 80
          targetPort: 6379
  ######################headGroupSpecs#################################
  # head group template and specs, (perhaps 'group' is not needed in the name)
  headGroupSpec:
    # the pod replicas in this group typed head (assuming there could be more than 1 in the future)
    replicas: 1
    # logical group name, for this called head-group, also can be functional
    # pod type head or worker
    # rayNodeType: head # Not needed since it is under the headgroup
    # the following params are used to complete the ray start: ray start --head --block --redis-port=6379 ...
    rayStartParams:
      port: '6379' # should match headService targetPort
      object-manager-port: '12345'
      node-manager-port: '12346'
      object-store-memory: '100000000'
      redis-password: 'LetMeInRay'
      num-cpus: '1' # can be auto-completed from the limits
      node-ip-address: $MY_POD_IP # auto-completed as the head pod IP
    #pod template
    template:
      metadata:
        labels:
          # custom labels. NOTE: do not define custom labels start with `raycluster.`, they may be used in controller.
          # Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
          rayCluster: raycluster-sample # will be injected if missing
          rayNodeType: head # will be injected if missing, must be head or wroker
          groupName: headgroup # will be injected if missing
        # annotations for pod
        annotations:
          key: value
      spec:
        containers:
        - name: ray-head
          image: rayproject/autoscaler
          # you can have any command and args here to run your code. 
          # the below command/args will be appended after the Ray start command and it args, and executed after Ray start.
          command: ["python"]
          #command: ["echo"]
          args:
          - '/opt/code.py'
          #- 'hello'
          env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          ports:
          - containerPort: 6379
          volumeMounts:
          - mountPath: /opt
            name: config
        volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: ray-code
            # An array of keys from the ConfigMap to create as files
            items:
            - key: code.py
              path: code.py
  ######################workerGroupSpecs#################################
  # worker group template and specs
  workerGroupsSpec:
    # the pod replicas in this group typed worker
    - replicas: 1
      minReplicas: 1
      maxReplicas: 10
      # logical group name, for this called small-group, also can be functional
      groupName: small-group
      # if worker pods need to be added, we can simply increment the replicas
      # if worker pods need to be removed, we decrement the replicas, and populate the podsToDelete list
      # the operator will remove pods from the list until the number of replicas is satisfied
      # when a pod is confirmed to be deleted, its name will be removed from the list below
      #scaleStrategy:
      #  workersToDelete:
      #  - worker-9m1rp
      #  - worker-4k2ih 
      # the following params are used to complete the ray start: ray start --block --node-ip-address= ...
      rayStartParams:
        #address: $RAY_IP:6379 # can be auto-completed
        #object-manager-port: '12345'
        #node-manager-port: '12346'
        #object-store-memory: '100000000'
        #num-cpus: '1' # can be auto-completed from the limits
        redis-password: 'LetMeInRay'
        node-ip-address: $MY_POD_IP
      #pod template
      template:
        metadata:
          labels:
            rayCluster: raycluster-sample # will be injected if missing
            rayNodeType: worker # will be injected if missing
            groupName: small-group # will be injected if missing
          # annotations for pod
          annotations:
            key: value
        spec:
          containers:
          - name: machine-learning # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
            image: rayproject/autoscaler
            # environment variables to set in the container.Optional.
            # Refer to https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
            env:
            - name: TYPE
              value: "worker"
            - name: MY_CPU_REQUEST
              valueFrom:
                resourceFieldRef:
                  containerName: machine-learning
                  resource: requests.cpu
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            ports:
            - containerPort: 80
            # use volumeMounts.Optional.
            # Refer to https://kubernetes.io/docs/concepts/storage/volumes/
            startupProbe:
              exec:
                command: ["/bin/bash","-c","ray start --block  --redis_password=$REDIS_PASSWORD  --address=$RAY_IP:$RAY_PORT && ray stop"]
              failureThreshold: 30
              periodSeconds: 10
            volumeMounts:
              - mountPath: /var/log
                name: log-volume
            resources:
              limits:
                cpu: "2"
              requests:
                cpu: "1"
          # use volumes
          # Refer to https://kubernetes.io/docs/concepts/storage/volumes/
          volumes:
            - name: log-volume
              emptyDir: {}
######################status#################################